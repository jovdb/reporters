/// <reference path='../interfaces.ts' />
var chalk = require('chalk');
module.exports = function () {
    return function (messages) {
        'use strict';
        function logIt(messageType, line) {
            if (line) {
                /* tslint:disable:no-console */
                messageType = (messageType || 'error').toLowerCase();
                if (messageType === 'debug') {
                    console.log(chalk.gray(line));
                }
                else if (messageType === 'info') {
                    console.info(line);
                }
                else if (messageType === 'warning') {
                    console.warn(chalk.yellow(line));
                }
                else {
                    console.error(chalk.red(line));
                }
            }
        }
        if (messages && Array.isArray(messages)) {
            messages.forEach(function (message) {
                if (message) {
                    var line = '';
                    // http://blogs.msdn.com/b/msbuild/archive/2006/11/03/msbuild-visual-studio-aware-error-messages-and-message-formats.aspx
                    var filePath = message.filePath;
                    var lineNbr = message.lineNbr;
                    var colNbr = message.colNbr;
                    if (filePath) {
                        line += filePath;
                    }
                    if (lineNbr) {
                        line += '(' + lineNbr;
                        if (colNbr) {
                            line += ',' + colNbr;
                        }
                        line += ')';
                    }
                    if (line) {
                        line += ': ';
                    }
                    line += (message.type || 'error');
                    if (message.code) {
                        line += ' ' + message.code;
                    }
                    line += ': ' + (message.description || 'No error message specified');
                    if (message.sourceName) {
                        line += ' (' + message.sourceName + ')';
                    }
                    logIt(message.type, line);
                }
            });
        }
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm91dHB1dC92cy1jb25zb2xlLnRzIl0sIm5hbWVzIjpbImxvZ0l0Il0sIm1hcHBpbmdzIjoiQUFBQSx5Q0FBeUM7QUFFekMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxPQUFPLEdBQUc7SUFFZixNQUFNLENBQUMsVUFBVSxRQUFvQjtRQUVuQyxZQUFZLENBQUM7UUFFYixTQUFTLEtBQUssQ0FBQyxXQUFtQixFQUFFLElBQVk7WUFDOUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUNUQSxBQUNBQSwrQkFEK0JBO2dCQUMvQkEsV0FBV0EsR0FBR0EsQ0FBQ0EsV0FBV0EsSUFBSUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0E7Z0JBQ3JEQSxFQUFFQSxDQUFDQSxDQUFDQSxXQUFXQSxLQUFLQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDNUJBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUNoQ0EsQ0FBQ0E7Z0JBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLFdBQVdBLEtBQUtBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO29CQUNsQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3JCQSxDQUFDQTtnQkFBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsV0FBV0EsS0FBS0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3JDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbkNBLENBQUNBO2dCQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDTkEsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pDQSxDQUFDQTtZQUVIQSxDQUFDQTtRQUNIQSxDQUFDQTtRQUVELEVBQUUsQ0FBQyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsT0FBTztnQkFDaEMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDWixJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7b0JBRWQsQUFDQSx5SEFEeUg7d0JBQ3JILFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO29CQUNoQyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO29CQUM5QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO29CQUU1QixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUFDLElBQUksSUFBSSxRQUFRLENBQUM7b0JBQUMsQ0FBQztvQkFDbkMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzt3QkFDWixJQUFJLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQzt3QkFDdEIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFBQyxJQUFJLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQzt3QkFBQyxDQUFDO3dCQUNyQyxJQUFJLElBQUksR0FBRyxDQUFDO29CQUNkLENBQUM7b0JBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFBQyxJQUFJLElBQUksSUFBSSxDQUFDO29CQUFDLENBQUM7b0JBQzNCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLENBQUM7b0JBRWxDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUNqQixJQUFJLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQzdCLENBQUM7b0JBRUQsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUksNEJBQTRCLENBQUMsQ0FBQztvQkFFckUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZCLElBQUksSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7b0JBQzFDLENBQUM7b0JBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRTVCLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJmaWxlIjoib3V0cHV0L3ZzLWNvbnNvbGUuanMiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxqb192ZF8wMDBcXERyb3Bib3hcXDIwMTVcXHJlcG9ydGVycy1naXRcXHNyYyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uL2ludGVyZmFjZXMudHMnIC8+XHJcblxyXG52YXIgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZXM6IElNZXNzYWdlW10pIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgZnVuY3Rpb24gbG9nSXQobWVzc2FnZVR5cGU6IHN0cmluZywgbGluZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgIGlmIChsaW5lKSB7XHJcbiAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tY29uc29sZSAqL1xyXG4gICAgICAgIG1lc3NhZ2VUeXBlID0gKG1lc3NhZ2VUeXBlIHx8ICdlcnJvcicpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2VUeXBlID09PSAnZGVidWcnKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhjaGFsay5ncmF5KGxpbmUpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2VUeXBlID09PSAnaW5mbycpIHtcclxuICAgICAgICAgIGNvbnNvbGUuaW5mbyhsaW5lKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2VUeXBlID09PSAnd2FybmluZycpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihjaGFsay55ZWxsb3cobGluZSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZChsaW5lKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIHRzbGludDplbmFibGU6bm8tY29uc29sZSAqL1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1lc3NhZ2VzICYmIEFycmF5LmlzQXJyYXkobWVzc2FnZXMpKSB7XHJcbiAgICAgIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgdmFyIGxpbmUgPSAnJztcclxuXHJcbiAgICAgICAgICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9tc2J1aWxkL2FyY2hpdmUvMjAwNi8xMS8wMy9tc2J1aWxkLXZpc3VhbC1zdHVkaW8tYXdhcmUtZXJyb3ItbWVzc2FnZXMtYW5kLW1lc3NhZ2UtZm9ybWF0cy5hc3B4XHJcbiAgICAgICAgICB2YXIgZmlsZVBhdGggPSBtZXNzYWdlLmZpbGVQYXRoO1xyXG4gICAgICAgICAgdmFyIGxpbmVOYnIgPSBtZXNzYWdlLmxpbmVOYnI7XHJcbiAgICAgICAgICB2YXIgY29sTmJyID0gbWVzc2FnZS5jb2xOYnI7XHJcblxyXG4gICAgICAgICAgaWYgKGZpbGVQYXRoKSB7IGxpbmUgKz0gZmlsZVBhdGg7IH1cclxuICAgICAgICAgIGlmIChsaW5lTmJyKSB7XHJcbiAgICAgICAgICAgIGxpbmUgKz0gJygnICsgbGluZU5icjtcclxuICAgICAgICAgICAgaWYgKGNvbE5icikgeyBsaW5lICs9ICcsJyArIGNvbE5icjsgfVxyXG4gICAgICAgICAgICBsaW5lICs9ICcpJztcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAobGluZSkgeyBsaW5lICs9ICc6ICc7IH1cclxuICAgICAgICAgIGxpbmUgKz0gKG1lc3NhZ2UudHlwZSB8fCAnZXJyb3InKTtcclxuXHJcbiAgICAgICAgICBpZiAobWVzc2FnZS5jb2RlKSB7XHJcbiAgICAgICAgICAgIGxpbmUgKz0gJyAnICsgbWVzc2FnZS5jb2RlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGxpbmUgKz0gJzogJyArIChtZXNzYWdlLmRlc2NyaXB0aW9uIHx8ICdObyBlcnJvciBtZXNzYWdlIHNwZWNpZmllZCcpO1xyXG5cclxuICAgICAgICAgIGlmIChtZXNzYWdlLnNvdXJjZU5hbWUpIHtcclxuICAgICAgICAgICAgbGluZSArPSAnICgnICsgbWVzc2FnZS5zb3VyY2VOYW1lICsgJyknO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGxvZ0l0KG1lc3NhZ2UudHlwZSwgbGluZSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuIl19