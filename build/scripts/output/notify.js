/// <reference path='../interfaces.ts' />
module.exports = function (options) {
    var notifier = require('node-notifier');
    var path = require('path');
    options = options || {};
    return function (messages) {
        'use strict';
        if (messages && Array.isArray(messages)) {
            var beep = messages.some(function (m) { return m.type === 'error'; });
            // Filter
            if (options.filter) {
                messages = options.filter(messages);
            }
            messages.forEach(function (message) {
                if (message) {
                    var title = (message.type || 'error') + ': ' + (message.sourceName || '') + ' ' + (message.code || '');
                    // Build file-line-char string
                    var location = '';
                    var filePath = message.filePath;
                    if (options.shortPath === true) {
                        filePath = path.basename(filePath);
                    }
                    else if (typeof options.shortPath === 'string') {
                        var basePath = options.shortPath.toUpperCase();
                        if (filePath.toUpperCase().substring(0, basePath.length) === basePath) {
                            filePath = filePath.substring(basePath.length);
                        }
                    }
                    var lineNbr = message.lineNbr;
                    var colNbr = message.colNbr;
                    if (filePath) {
                        location += filePath;
                    }
                    if (lineNbr) {
                        location += '(' + lineNbr;
                        if (colNbr) {
                            location += ',' + colNbr;
                        }
                        location += ')';
                    }
                    // Add URL
                    var url;
                    if (message.sourceName && message.code) {
                        if (message.sourceName.indexOf('jslint') > -1 || message.sourceName.indexOf('jshint') > -1 || message.sourceName.indexOf('eslint') > -1) {
                            url = 'https://jslinterrors.com/?q=' + message.code;
                        }
                    }
                    // Make toast!
                    var notifyOptions = {
                        title: title,
                        message: message.description + '\n' + location,
                        open: url,
                        time: 15000,
                        beep: beep
                    };
                    // Callback to allow changing notify options
                    if (options && options.notifyOptions) {
                        notifyOptions = options.notifyOptions(notifyOptions, message);
                    }
                    notifier.notify(notifyOptions);
                    beep = false; // Beep once
                }
            });
        }
    };
};

//# sourceMappingURL=data:application/json;base64,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QUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDdkMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUN4SSxHQUFHLEdBQUcsOEJBQThCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDdEQsQ0FBQztvQkFDSCxDQUFDO29CQUVELEFBQ0EsY0FEYzt3QkFDVixhQUFhLEdBQUc7d0JBQ2xCLEtBQUssRUFBRSxLQUFLO3dCQUNaLE9BQU8sRUFBRSxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxRQUFRO3dCQUM5QyxJQUFJLEVBQUUsR0FBRzt3QkFDVCxJQUFJLEVBQUUsS0FBSzt3QkFDWCxJQUFJLEVBQUUsSUFBSTtxQkFDWCxDQUFDO29CQUVGLEFBQ0EsNENBRDRDO29CQUM1QyxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7d0JBQ3JDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztvQkFDaEUsQ0FBQztvQkFFRCxRQUFRLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO29CQUUvQixJQUFJLEdBQUcsS0FBSyxFQUFFLFlBQVk7Z0JBRTVCLENBQUMsR0FGYztZQUdqQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJmaWxlIjoib3V0cHV0L25vdGlmeS5qcyIsInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXGpvX3ZkXzAwMFxcRHJvcGJveFxcMjAxNVxccmVwb3J0ZXJzLWdpdFxcc3JjIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vaW50ZXJmYWNlcy50cycgLz5cclxuXHJcbmludGVyZmFjZSBJTm90aXR5T3B0aW9ucyB7XHJcblxyXG4gIC8qKiBmaWx0ZXIgb3IgYWRqdXN0IG1lc3NhZ2VzIHRvIG5vdGlmeSwgZWc6IG9ubHkgZXJyb3JzICovXHJcbiAgZmlsdGVyPzogKG1lc3NhZ2VzOiBJTWVzc2FnZVtdKSA9PiBJTWVzc2FnZVtdO1xyXG5cclxuICAvLyBBZGp1c3Qgbm90aWZ5IG9wdGlvbnNcclxuICBub3RpZnlPcHRpb25zPzogKG9wdGlvbnM6IGFueSwgbWVzc2FnZTogSU1lc3NhZ2UpID0+IGFueTtcclxuXHJcbiAgLy8gdHJ1ZSB0byByZW1vdmUgcGF0aCwgc3RyaW5nIHRvIHJlbW92ZSBiYXNlIHBhdGhcclxuICBzaG9ydFBhdGg/OiBib29sZWFuIHwgc3RyaW5nO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zOiBJTm90aXR5T3B0aW9ucykge1xyXG5cclxuICB2YXIgbm90aWZpZXIgPSByZXF1aXJlKCdub2RlLW5vdGlmaWVyJyk7XHJcbiAgdmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcblxyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2VzOiBJTWVzc2FnZVtdKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGlmIChtZXNzYWdlcyAmJiBBcnJheS5pc0FycmF5KG1lc3NhZ2VzKSkge1xyXG5cclxuICAgICAgdmFyIGJlZXAgPSBtZXNzYWdlcy5zb21lKG0gPT4gbS50eXBlID09PSAnZXJyb3InKTtcclxuXHJcbiAgICAgIC8vIEZpbHRlclxyXG4gICAgICBpZiAob3B0aW9ucy5maWx0ZXIpIHtcclxuICAgICAgICBtZXNzYWdlcyA9IG9wdGlvbnMuZmlsdGVyKG1lc3NhZ2VzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbWVzc2FnZXMuZm9yRWFjaCgobWVzc2FnZSkgPT4ge1xyXG4gICAgICAgIGlmIChtZXNzYWdlKSB7XHJcblxyXG4gICAgICAgICAgdmFyIHRpdGxlID0gKG1lc3NhZ2UudHlwZSB8fCAnZXJyb3InKSArICc6ICcgKyAobWVzc2FnZS5zb3VyY2VOYW1lIHx8ICcnKSArICcgJyArIChtZXNzYWdlLmNvZGUgfHwgJycpO1xyXG5cclxuICAgICAgICAgIC8vIEJ1aWxkIGZpbGUtbGluZS1jaGFyIHN0cmluZ1xyXG4gICAgICAgICAgdmFyIGxvY2F0aW9uID0gJyc7XHJcbiAgICAgICAgICB2YXIgZmlsZVBhdGggPSBtZXNzYWdlLmZpbGVQYXRoO1xyXG4gICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRQYXRoID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGZpbGVQYXRoID0gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLnNob3J0UGF0aCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdmFyIGJhc2VQYXRoID0gKDxzdHJpbmc+b3B0aW9ucy5zaG9ydFBhdGgpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlUGF0aC50b1VwcGVyQ2FzZSgpLnN1YnN0cmluZygwLCBiYXNlUGF0aC5sZW5ndGgpID09PSBiYXNlUGF0aCkge1xyXG4gICAgICAgICAgICAgIGZpbGVQYXRoID0gZmlsZVBhdGguc3Vic3RyaW5nKGJhc2VQYXRoLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhciBsaW5lTmJyID0gbWVzc2FnZS5saW5lTmJyO1xyXG4gICAgICAgICAgdmFyIGNvbE5iciA9IG1lc3NhZ2UuY29sTmJyO1xyXG4gICAgICAgICAgaWYgKGZpbGVQYXRoKSB7IGxvY2F0aW9uICs9IGZpbGVQYXRoOyB9XHJcbiAgICAgICAgICBpZiAobGluZU5icikge1xyXG4gICAgICAgICAgICBsb2NhdGlvbiArPSAnKCcgKyBsaW5lTmJyO1xyXG4gICAgICAgICAgICBpZiAoY29sTmJyKSB7IGxvY2F0aW9uICs9ICcsJyArIGNvbE5icjsgfVxyXG4gICAgICAgICAgICBsb2NhdGlvbiArPSAnKSc7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQWRkIFVSTFxyXG4gICAgICAgICAgdmFyIHVybDogc3RyaW5nO1xyXG4gICAgICAgICAgaWYgKG1lc3NhZ2Uuc291cmNlTmFtZSAmJiBtZXNzYWdlLmNvZGUpIHtcclxuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc291cmNlTmFtZS5pbmRleE9mKCdqc2xpbnQnKSA+IC0xIHx8IG1lc3NhZ2Uuc291cmNlTmFtZS5pbmRleE9mKCdqc2hpbnQnKSA+IC0xIHx8IG1lc3NhZ2Uuc291cmNlTmFtZS5pbmRleE9mKCdlc2xpbnQnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vanNsaW50ZXJyb3JzLmNvbS8/cT0nICsgbWVzc2FnZS5jb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gTWFrZSB0b2FzdCFcclxuICAgICAgICAgIHZhciBub3RpZnlPcHRpb25zID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UuZGVzY3JpcHRpb24gKyAnXFxuJyArIGxvY2F0aW9uLFxyXG4gICAgICAgICAgICBvcGVuOiB1cmwsXHJcbiAgICAgICAgICAgIHRpbWU6IDE1MDAwLFxyXG4gICAgICAgICAgICBiZWVwOiBiZWVwXHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIC8vIENhbGxiYWNrIHRvIGFsbG93IGNoYW5naW5nIG5vdGlmeSBvcHRpb25zXHJcbiAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm5vdGlmeU9wdGlvbnMpIHtcclxuICAgICAgICAgICAgbm90aWZ5T3B0aW9ucyA9IG9wdGlvbnMubm90aWZ5T3B0aW9ucyhub3RpZnlPcHRpb25zLCBtZXNzYWdlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBub3RpZmllci5ub3RpZnkobm90aWZ5T3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgYmVlcCA9IGZhbHNlOyAvLyBCZWVwIG9uY2VcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG4iXX0=